heat_template_version: rocky
description: >
  Software Config to drive os-net-config to configure VLANs for the {{role.name}} role.
parameters:
  ControlPlaneIp:
    default: ''
    description: IP address/subnet on the ctlplane network
    type: string
  ControlPlaneSubnetCidr:
    default: ''
    description: >
      The subnet CIDR of the control plane network. (The parameter is
      automatically resolved from the ctlplane subnet's cidr attribute.)
    type: string
  ControlPlaneDefaultRoute:
    default: ''
    description: The default route of the control plane network. (The parameter
      is automatically resolved from the ctlplane subnet's gateway_ip attribute.)
    type: string
{% for network in networks %}
  {{network.name}}IpSubnet:
    default: ''
    description: IP address/subnet on the {{network.name_lower}} network
    type: string
  {{network.name}}NetworkVlanID:
    default: {{network.vlan}}
    description: Vlan ID for the {{network.name_lower}} network traffic.
    type: number
{%- if network.ipv6|default(false) and network.gateway_ipv6|default(false) %}
  {{network.name}}InterfaceDefaultRoute:
    default: '{{network.gateway_ipv6}}'
    description: default route for the {{network.name_lower}} network
    type: string
{%- elif network.gateway_ip|default(false) %}
  {{network.name}}InterfaceDefaultRoute:
    default: '{{network.gateway_ip}}'
    description: default route for the {{network.name_lower}} network
    type: string
{%- endif %}
  {{network.name}}InterfaceRoutes:
    default: []
    description: >
      Routes for the {{network.name_lower}} network traffic.
      JSON route e.g. [{'destination':'10.0.0.0/16', 'nexthop':'10.0.0.1'}]
      Unless the default is changed, the parameter is automatically resolved
      from the subnet host_routes attribute.
    type: json
{%- endfor %}
  DnsServers: # Override this via parameter_defaults
    default: []
    description: >
      DNS servers to use for the Overcloud (2 max for some implementations).
      If not set the nameservers configured in the ctlplane subnet's
      dns_nameservers attribute will be used.
    type: comma_delimited_list
  EC2MetadataIp:
    default: ''
    description: The IP address of the EC2 metadata server. (The parameter
      is automatically resolved from the ctlplane subnet's host_routes attribute.)
    type: string
resources:
  OsNetConfigImpl:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template:
            get_file: ../../scripts/run-os-net-config.sh
          params:
            $network_config:
              network_config:
              - type: linux_bridge
{%- if role.name.startswith('CephStorage') or role.name.startswith('ObjectStorage') or role.name.startswith('BlockStorage') %}
                name: br-storage
{%- else %}
                name: bridge_name
{%- endif %}
                use_dhcp: false
                dns_servers:
                  get_param: DnsServers
                addresses:
                - ip_netmask:
                    list_join:
                    - /
                    - - get_param: ControlPlaneIp
                      - get_param: ControlPlaneSubnetCidr
                routes:
                - ip_netmask: 169.254.169.254/32
                  next_hop:
                    get_param: EC2MetadataIp
{%- if role.default_route_networks is not defined or 'ControlPlane' in role.default_route_networks %}
                - default: true
                  next_hop:
                    get_param: ControlPlaneDefaultRoute
{%- endif %}
                members:
                - type: interface
                  name: interface_name
                  primary: true
{%- for network in networks if network.enabled|default(true) and network.name in role.networks
    and network.name not in role.networks_skip_config|default([]) %}
              - type: vlan
                vlan_id:
                  get_param: {{network.name}}NetworkVlanID
{%- if role.name.startswith('CephStorage') or role.name.startswith('ObjectStorage') or role.name.startswith('BlockStorage') %}
                device: br-storage
{%- else %}
                device: bridge_name
{%- endif %}
                addresses:
                - ip_netmask:
                    get_param: {{network.name}}IpSubnet
                routes:
                    list_concat_unique:
                      - get_param: {{network.name}}InterfaceRoutes
{%- if network.name in role.default_route_networks %}
                      - - default: true
                          next_hop:
                            get_param: {{network.name}}InterfaceDefaultRoute
{%- endif %}
{%- endfor %}
outputs:
  OS::stack_id:
    description: The OsNetConfigImpl resource.
    value:
      get_resource: OsNetConfigImpl
