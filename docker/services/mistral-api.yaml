heat_template_version: rocky

description: >
  OpenStack containerized Mistral API service

parameters:
  DockerMistralApiImage:
    description: image
    type: string
  DockerMistralConfigImage:
    description: The container image to use for the mistral config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  MistralApiBase:
    type: ../../puppet/services/mistral-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Mistral API role.
    value:
      service_name: {get_attr: [MistralApiBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [MistralApiBase, role_data, config_settings]
      logging_source: {get_attr: [MistralApiBase, role_data, logging_source]}
      logging_groups: {get_attr: [MistralApiBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [MistralApiBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: mistral
        puppet_tags: mistral_config
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [MistralApiBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerMistralConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/mistral_api.json:
          command: /usr/bin/mistral-server --config-file=/etc/mistral/mistral.conf --log-file=/var/log/mistral/api.log --server=api
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/mistral
              owner: mistral:mistral
              recurse: true
      docker_config:
        # db sync runs before permissions set by kolla_config
        step_2:
          mistral_init_logs:
            image: &mistral_api_image {get_param: DockerMistralApiImage}
            privileged: false
            user: root
            volumes:
              - /var/log/containers/mistral:/var/log/mistral
            command: ['/bin/bash', '-c', 'chown -R mistral:mistral /var/log/mistral']
        step_3:
          mistral_db_sync:
            start_order: 0
            image: *mistral_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/mistral/etc/mistral/:/etc/mistral/:ro
                  - /var/log/containers/mistral:/var/log/mistral
            command: "/usr/bin/bootstrap_host_exec mistral_api su mistral -s /bin/bash -c 'mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head'"
        step_4:
          mistral_api:
            start_order: 15
            image: *mistral_api_image
            net: host
            privileged: false
            restart: always
            healthcheck:
              test: /openstack/healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/mistral_api.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/mistral/:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/mistral:/var/log/mistral
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
        step_5:
          mistral_db_populate:
            start_order: 1
            image: *mistral_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/mistral/etc/mistral/:/etc/mistral/:ro
                  - /var/log/containers/mistral:/var/log/mistral
            # NOTE: dprince this requires that we install openstack-tripleo-common into
            # the Mistral API image so that we get tripleo* actions
            command: "/usr/bin/bootstrap_host_exec mistral_api su mistral -s /bin/bash -c 'mistral-db-manage --config-file /etc/mistral/mistral.conf populate'"
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/mistral, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/mistral, 'setype': svirt_sandbox_file_t }
        - name: mistral logs readme
          copy:
            dest: /var/log/mistral/readme.txt
            content: |
              Log files from mistral containers can be found under
              /var/log/containers/mistral.
          ignore_errors: true
      upgrade_tasks:
        - when: step|int == 0
          tags: common
          block:
            - name: Check if mistral api is deployed
              command: systemctl is-enabled --quiet openstack-mistral-api
              ignore_errors: True
              register: mistral_api_enabled_result
            - set_fact:
                mistral_api_enabled: "{{ mistral_api_enabled_result.rc == 0 }}"
            - name: Check if httpd service is running
              command: systemctl is-active --quiet httpd
              ignore_errors: True
              register: httpd_running_result
              when: httpd_running is undefined
            - name: Set fact httpd_running
              when: httpd_running is undefined
              set_fact:
                httpd_running: "{{ httpd_running_result.rc == 0 }}"
            - name: Check for mistral_api running under apache
              shell: "httpd -t -D DUMP_VHOSTS | grep -q mistral"
              ignore_errors: True
              register: mistral_httpd_enabled_result
            - set_fact:
                mistral_httpd_enabled: "{{ mistral_httpd_enabled_result.rc == 0 }}"
            - name: "PreUpgrade step0,validation: Check if openstack-mistral-api is running"
              command: systemctl is-active --quiet openstack-mistral-api
              when:
                - mistral_api_enabled|bool
              tags: validation
            - name: "PreUpgrade step0,validation: Check if mistral_api_wsgi is running"
              shell: systemctl status 'httpd' | grep -q mistral
              tags: validation
              when:
                - mistral_httpd_enabled|bool
                - httpd_running|bool
        - when: step|int == 2
          block:
            - name: Stop and disable mistral_api service (pre-upgrade not under httpd)
              when:
                - mistral_api_enabled|bool
              service: name=openstack-mistral-api state=stopped enabled=no
            - name: Stop mistral_api service (running under httpd)
              service: name=httpd state=stopped enabled=no
              when:
                - mistral_httpd_enabled|bool
                - httpd_running|bool
        - when: step|int == 3
          block:
            - name: Set fact for removal of openstack-mistral-api package
              set_fact:
                remove_mistral_api_package: {get_param: UpgradeRemoveUnusedPackages}
            - name: Remove openstack-mistral-api package if operator requests it
              package: name=openstack-mistral-api state=removed
              ignore_errors: True
              when: remove_mistral_api_package|bool
